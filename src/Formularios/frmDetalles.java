/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Formularios;

import Entidades.*;
import Entidades.ListaGlobalDetalles;
import Entidades.Ordenamiento.OrdenarFechaSort;
import Entidades.Ordenamiento.OrdenarIDSort;
import Entidades.Ordenamiento.OrdenarNombreSort;
import java.io.File;
import java.io.PrintWriter;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.json.JSONArray;
import org.json.JSONObject;



/**
 *
 * @author Jimmy
 */
public class frmDetalles extends javax.swing.JFrame {

    /**
     * Creates new form frmDetalles
     */
    
    DefaultTableModel modeloDetallesPacientes;
    GestorDoctores doctores;
    SimpleDateFormat formatoFecha;
    ArrayList<ListaGlobalDetalles> listaGlobalDetalles;
    
    public frmDetalles(GestorDoctores doctores) throws ParseException {
        initComponents();
        
        listaGlobalDetalles = new ArrayList<ListaGlobalDetalles>();
        this.doctores = doctores;
        modeloDetallesPacientes = (DefaultTableModel) this.jtListaGlobalDetalle.getModel();
        formatoFecha = new SimpleDateFormat("dd/MM/yyyy");
        
        if(doctores.obtenerListaDoctores().size() == 0){
            this.btnOrdenarID_BD.setEnabled(false);
            this.btnOrdenarID_Sort.setEnabled(false);
            this.btnOrdenarNombre.setEnabled(false);
            this.btnOrdenarFecha.setEnabled(false);
            this.btnExportarCSV.setEnabled(false);
            this.btnExportarHTML.setEnabled(false);
            this.btnExportarJSON.setEnabled(false);
            this.btnRecargarTablas.setEnabled(false);
            this.btnBuscarPaciente.setEnabled(false);
        }
        else{
            LlenarLista();
            CargarTablas();
        }
        
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnImportarJSON = new javax.swing.JButton();
        btnExportarHTML = new javax.swing.JButton();
        btnExportarCSV = new javax.swing.JButton();
        btnExportarJSON = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jtListaGlobalDetalle = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        btnOrdenarID_BD = new javax.swing.JButton();
        btnOrdenarID_Sort = new javax.swing.JButton();
        btnOrdenarNombre = new javax.swing.JButton();
        btnOrdenarFecha = new javax.swing.JButton();
        btnBuscarPaciente = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        txtBuscarPaciente = new javax.swing.JTextField();
        lblTiempo = new javax.swing.JLabel();
        btnRecargarTablas = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnImportarJSON.setText("Importar JSON");
        btnImportarJSON.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImportarJSONActionPerformed(evt);
            }
        });

        btnExportarHTML.setLabel("Exportar HTML");
        btnExportarHTML.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportarHTMLActionPerformed(evt);
            }
        });

        btnExportarCSV.setLabel("Exportar CSV");
        btnExportarCSV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportarCSVActionPerformed(evt);
            }
        });

        btnExportarJSON.setLabel("Exportar JSON");
        btnExportarJSON.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportarJSONActionPerformed(evt);
            }
        });

        jLabel9.setText("Lista global:");

        jtListaGlobalDetalle.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nombre", "Padecimiento", "Estado", "Fecha de ingreso", "Doctor"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtListaGlobalDetalle.setName("jtPaciente"); // NOI18N
        jScrollPane3.setViewportView(jtListaGlobalDetalle);

        jLabel1.setText("Ordenar por ID (burbuja doble):");

        jLabel2.setText("Odenar por ID (sort):");

        jLabel3.setText("Ordenar por nombre:");

        jLabel4.setText("Ordenar pacientes por fecha de ingreso:");

        jLabel5.setText("Exportar HTML:");

        jLabel6.setText("Exportar JSON:");

        jLabel7.setText("Importar JSON:");

        jLabel8.setText("Exportar CSV:");

        btnOrdenarID_BD.setText("Ordenar ID");
        btnOrdenarID_BD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOrdenarID_BDActionPerformed(evt);
            }
        });

        btnOrdenarID_Sort.setText("Ordenar ID");
        btnOrdenarID_Sort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOrdenarID_SortActionPerformed(evt);
            }
        });

        btnOrdenarNombre.setText("Ordenar por nombre");
        btnOrdenarNombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOrdenarNombreActionPerformed(evt);
            }
        });

        btnOrdenarFecha.setText("Ordenar por fecha");
        btnOrdenarFecha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOrdenarFechaActionPerformed(evt);
            }
        });

        btnBuscarPaciente.setText("Buscar");
        btnBuscarPaciente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarPacienteActionPerformed(evt);
            }
        });

        jLabel10.setText("Buscar Paciente por ID:");

        lblTiempo.setText("Ordenado en [cant] ms / [cant] segs");

        btnRecargarTablas.setText("Recargar tablas");
        btnRecargarTablas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRecargarTablasActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane3))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addGap(0, 1046, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(211, 211, 211)
                            .addComponent(btnOrdenarFecha))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(jLabel4)
                            .addGap(365, 365, 365)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(88, 88, 88)
                                .addComponent(jLabel3)
                                .addGap(10, 10, 10)
                                .addComponent(btnOrdenarNombre))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(39, 39, 39)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addGap(6, 6, 6)
                                        .addComponent(btnOrdenarID_BD))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnOrdenarID_Sort)))))
                        .addGap(32, 32, 32)
                        .addComponent(lblTiempo)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel6)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(btnExportarJSON, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(jLabel7)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(btnImportarJSON, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnExportarHTML, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnExportarCSV, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(2, 2, 2)))
                .addGap(66, 66, 66)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnRecargarTablas, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(41, 41, 41))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel10)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtBuscarPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnBuscarPaciente)))
                        .addGap(18, 18, 18))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnExportarHTML)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnExportarCSV)
                            .addComponent(jLabel8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnExportarJSON)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnImportarJSON)
                            .addComponent(jLabel7)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 198, Short.MAX_VALUE)
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(btnOrdenarID_BD)
                                    .addComponent(jLabel1))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(btnOrdenarID_Sort)
                                            .addComponent(jLabel2))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(8, 8, 8)
                                                .addComponent(jLabel3))
                                            .addComponent(btnOrdenarNombre))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(lblTiempo)
                                        .addGap(32, 32, 32)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel4)
                                    .addComponent(btnOrdenarFecha)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel10)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(btnBuscarPaciente)
                                    .addComponent(txtBuscarPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnRecargarTablas, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(33, 33, 33)))))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnImportarJSONActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImportarJSONActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));
        int result = fileChooser.showOpenDialog(null); // null o tu componente padre
        
        if (result == JFileChooser.APPROVE_OPTION) {
            File archivo = fileChooser.getSelectedFile();
            leerArchivoJSON(archivo);       
        }
    }//GEN-LAST:event_btnImportarJSONActionPerformed

    private void btnExportarHTMLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportarHTMLActionPerformed
        // TODO add your handling code here:
        PrintWriter pw = null;
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));
        int result = fileChooser.showOpenDialog(this);
        File selectedFile=null;
        if (result == JFileChooser.APPROVE_OPTION) 
        {
            selectedFile = fileChooser.getSelectedFile();
            System.out.println("Archivo seleccionado: " + selectedFile.getAbsolutePath());
        }
        try 
        {
            pw = new PrintWriter(new File(selectedFile.getAbsolutePath()));
            // ARMAR EL ARCHIVO HTML....
            StringBuilder strLinea = new StringBuilder();
            strLinea.append("<html><head><title>Lista de panchitos</title></head>"
                    + "<body><h2>Lista de pacientes</h2>"
                    + "<table border='2'>" +"\n");
            strLinea.append("<tr><td><b>ID</td><td><b>Nombre</td><td><b>Padecimiento</td><td><b>Estado</td><td><b>Fecha Ingreso</td><td><b>Doctor</td></tr>" +"\n");
            
            for(int i=0; i<this.listaGlobalDetalles.size(); i++)
            {
                strLinea.append("<tr>" +"\n");
                // primer atributo
                strLinea.append("<td>");
                strLinea.append(this.listaGlobalDetalles.get(i).IDPaciente);
                strLinea.append("</td>" +"\n");
                // segundo atributo
                strLinea.append("<td>");
                strLinea.append(this.listaGlobalDetalles.get(i).nombrePaciente);
                strLinea.append("</td>" +"\n");
                // tercer atributo
                strLinea.append("<td>");
                strLinea.append(this.listaGlobalDetalles.get(i).padecimiento);
                strLinea.append("</td>" +"\n");
                 // cuarto atributo
                strLinea.append("<td>");
                strLinea.append(this.listaGlobalDetalles.get(i).estado);
                strLinea.append("</td>" +"\n");
                  
                strLinea.append("<td>");
                strLinea.append(formatoFecha.format(listaGlobalDetalles.get(i).fechaIngreso));
                strLinea.append("</td>" +"\n");
                    
                strLinea.append("<td>");
                strLinea.append(this.listaGlobalDetalles.get(i).nombreDoctor);
                strLinea.append("</td>" +"\n");
                    
                strLinea.append("</tr>" +"\n");
            }
            strLinea.append("</table></body></html>" +"\n");
            pw.write(strLinea.toString());
            pw.close();
        }
        catch (Exception e) 
        {
            //this.jTextArea1.setText("ERROR: "+e.toString());
        }
    }//GEN-LAST:event_btnExportarHTMLActionPerformed

    private void btnExportarCSVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportarCSVActionPerformed
        // TODO add your handling code here:
        PrintWriter pw = null;
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));
        int result = fileChooser.showOpenDialog(this);
        File selectedFile=null;
        
        if (result == JFileChooser.APPROVE_OPTION) 
        {
            selectedFile = fileChooser.getSelectedFile();
            System.out.println("Archivo seleccionado: " + selectedFile.getAbsolutePath());
        }
        try 
        {
            pw = new PrintWriter(new File(selectedFile.getAbsolutePath()));
        }
        catch (Exception ex) 
        {
            JOptionPane.showMessageDialog(null, ex.toString(), "Error", JOptionPane.ERROR_MESSAGE);
        }
        
        StringBuilder strLinea = new StringBuilder();
        String nombre,padecimiento,estado,fecha,doctor;
        int id;
        
        strLinea.append("ID" + "," + "Nombre, Padecimiento, Estado, Fecha, Doctor\n");
        for(int i=0; i<this.listaGlobalDetalles.size(); i++){
            id = this.listaGlobalDetalles.get(i).IDPaciente;
            nombre = this.listaGlobalDetalles.get(i).nombrePaciente;
            padecimiento = this.listaGlobalDetalles.get(i).padecimiento;
            estado = this.listaGlobalDetalles.get(i).estado;
            fecha = formatoFecha.format(this.listaGlobalDetalles.get(i).fechaIngreso);
            doctor = this.listaGlobalDetalles.get(i).nombreDoctor;
                
            strLinea.append(id + "," + nombre + "," + padecimiento + "," + estado + "," + fecha + "," + doctor + "," + "\n");
        }
        pw.write(strLinea.toString());
        pw.close();
        System.out.println("Hecho!");
    }//GEN-LAST:event_btnExportarCSVActionPerformed

    private void btnExportarJSONActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportarJSONActionPerformed
        // TODO add your handling code here:
        PrintWriter pw = null;
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));
        int result = fileChooser.showOpenDialog(this);
        File selectedFile=null;
        
        if (result == JFileChooser.APPROVE_OPTION) 
        {
            selectedFile = fileChooser.getSelectedFile();
            System.out.println("Archivo seleccionado: " + selectedFile.getAbsolutePath());
        }
        try 
        {
            pw = new PrintWriter(new File(selectedFile.getAbsolutePath()));
        }
        catch (Exception ex) 
        {
            JOptionPane.showMessageDialog(null, ex.toString(), "Error", JOptionPane.ERROR_MESSAGE);
        }
        
        StringBuilder strLinea = new StringBuilder();
        String nombre,padecimiento,estado,fecha,doctor;
        int id;
        
        strLinea.append("{ \n");
        strLinea.append("\"listaDoctores\": [ \n");
        for(int i=0; i<this.doctores.obtenerListaDoctores().size(); i++){
            strLinea.append("{ \n");
            strLinea.append("\"ID\": \"" + this.doctores.obtenerListaDoctores().get(i).ID + "\" , \n");
            strLinea.append("\"Nombre\": " + "\"" + this.doctores.obtenerListaDoctores().get(i).nombre + "\" , \n");
            strLinea.append("\"Especialidad\": \"" + this.doctores.obtenerListaDoctores().get(i).especialidad + "\", \n");
            strLinea.append("\"Lista Pacientes\": [ \n");
            for(int j=0; j<this.doctores.obtenerListaDoctores().get(i).listaPacientes.size(); j++){
                id = this.doctores.obtenerListaDoctores().get(i).listaPacientes.get(j).ID;
                nombre = this.doctores.obtenerListaDoctores().get(i).listaPacientes.get(j).nombre;
                padecimiento = this.doctores.obtenerListaDoctores().get(i).listaPacientes.get(j).padecimiento;
                estado = this.doctores.obtenerListaDoctores().get(i).listaPacientes.get(j).estado;
                fecha = formatoFecha.format(this.doctores.obtenerListaDoctores().get(i).listaPacientes.get(j).fechaIngreso);
                
                if(j==this.doctores.obtenerListaDoctores().get(i).listaPacientes.size()-1){
                    strLinea.append("{\"ID\": \"" + id + "\", \"Nombre\": \"" + nombre + "\", \"Padecimiento\": \"" +  padecimiento + "\", \"Estado\": \"" +  estado +  "\" ,\"Fecha\": \"" + fecha + "\" } \n");
                }else{
                    strLinea.append("{\"ID\": \"" + id + "\", \"Nombre\": \"" + nombre + "\", \"Padecimiento\": \"" +  padecimiento + "\", \"Estado\": \"" +  estado + "\" ,\"Fecha\": \"" + fecha + "\" }, \n");
                }
                
            }
            strLinea.append("]");
            if(i==this.doctores.obtenerListaDoctores().size()-1){
                strLinea.append("}");
            }else{
                strLinea.append("},");
            }  
        }
        strLinea.append("]");
        strLinea.append("}");
  
        pw.write(strLinea.toString());
        pw.close();
    }//GEN-LAST:event_btnExportarJSONActionPerformed

    private void btnOrdenarID_BDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOrdenarID_BDActionPerformed
        // TODO add your handling code here:
        Date dInicio = new Date();
        int dimension = this.listaGlobalDetalles.size();
        ListaGlobalDetalles dTemp;
        
        for(int i = 0; i < dimension - 1; i++)
        {
            for(int j = 0; j < dimension - 1; j++)
            {
                if (this.listaGlobalDetalles.get(j).IDPaciente > this.listaGlobalDetalles.get(j + 1).IDPaciente)
                {
                    dTemp = this.listaGlobalDetalles.get(j + 1);
                    this.listaGlobalDetalles.set(j + 1, this.listaGlobalDetalles.get(j));
                    this.listaGlobalDetalles.set(j, dTemp);                                   
                }            
                
                if (this.listaGlobalDetalles.get(dimension-1-j).IDPaciente < this.listaGlobalDetalles.get(dimension-2-j).IDPaciente)
                {
                    dTemp = this.listaGlobalDetalles.get(dimension-2-j);
                    this.listaGlobalDetalles.set(dimension-2-j, this.listaGlobalDetalles.get(dimension-1-j));
                    this.listaGlobalDetalles.set(dimension-1-j, dTemp);
                }
            }
        }
        
        Date dFin = new Date();
        long duracionOrdenamiento = dFin.getTime()-dInicio.getTime();
        this.lblTiempo.setText("Ordenado en " + Long.toString(duracionOrdenamiento) +" ms / "+Long.toString(duracionOrdenamiento/1000)+" segs.");
        CargarTablas();
    }//GEN-LAST:event_btnOrdenarID_BDActionPerformed

    private void btnOrdenarNombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOrdenarNombreActionPerformed
        // TODO add your handling code here:
        Date dInicio = new Date();
        
        OrdenarNombreSort sortNombre = new OrdenarNombreSort();
        this.listaGlobalDetalles.sort(sortNombre);
        this.CargarTablas();
        
        Date dFin = new Date();
        long duracionOrdenamiento = dFin.getTime()-dInicio.getTime();
        this.lblTiempo.setText("Ordenado en " + Long.toString(duracionOrdenamiento) +" ms / "+Long.toString(duracionOrdenamiento/1000)+" segs.");
    }//GEN-LAST:event_btnOrdenarNombreActionPerformed

    private void btnOrdenarFechaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOrdenarFechaActionPerformed
        // TODO add your handling code here:
        Date dInicio = new Date();
        
        OrdenarFechaSort sortFecha = new OrdenarFechaSort();
        this.listaGlobalDetalles.sort(sortFecha);
        this.CargarTablas();
        
        Date dFin = new Date();
        long duracionOrdenamiento = dFin.getTime()-dInicio.getTime();
        this.lblTiempo.setText("Ordenado en " + Long.toString(duracionOrdenamiento) +" ms / "+Long.toString(duracionOrdenamiento/1000)+" segs.");
    }//GEN-LAST:event_btnOrdenarFechaActionPerformed

    private void btnBuscarPacienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarPacienteActionPerformed
        // TODO add your handling code here:
        this.modeloDetallesPacientes.getDataVector().removeAllElements();
        
        String busquedaPaciente = this.txtBuscarPaciente.getText().toUpperCase();
        
        for (int i = 0; i < this.listaGlobalDetalles.size(); i++){
            if(busquedaPaciente.equals(Integer.toString(this.listaGlobalDetalles.get(i).IDPaciente))){
                String[] registroDoctores = {
                   Integer.toString(this.listaGlobalDetalles.get(i).IDPaciente), 
                   this.listaGlobalDetalles.get(i).nombrePaciente, 
                   this.listaGlobalDetalles.get(i).padecimiento,
                   this.listaGlobalDetalles.get(i).estado,
                   formatoFecha.format(this.listaGlobalDetalles.get(i).fechaIngreso),
                   this.listaGlobalDetalles.get(i).nombreDoctor
                };
                
                modeloDetallesPacientes.addRow(registroDoctores);
           }   
        }
        
        if(modeloDetallesPacientes.getRowCount() == 0){
            JOptionPane.showMessageDialog(null, "El ID ingresado no pertenece a ningún paciente", "Error", JOptionPane.ERROR_MESSAGE);
        }
        
        txtBuscarPaciente.setText("");
    }//GEN-LAST:event_btnBuscarPacienteActionPerformed

    private void btnRecargarTablasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRecargarTablasActionPerformed
        // TODO add your handling code here:
        CargarTablas();
    }//GEN-LAST:event_btnRecargarTablasActionPerformed

    private void btnOrdenarID_SortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOrdenarID_SortActionPerformed
        // TODO add your handling code here:
        Date dInicio = new Date();
        
        OrdenarIDSort sortID = new OrdenarIDSort();
        this.listaGlobalDetalles.sort(sortID);
        this.CargarTablas();
        
        Date dFin = new Date();
        long duracionOrdenamiento = dFin.getTime()-dInicio.getTime();
        this.lblTiempo.setText("Ordenado en " + Long.toString(duracionOrdenamiento) +" ms / "+Long.toString(duracionOrdenamiento/1000)+" segs.");
    }//GEN-LAST:event_btnOrdenarID_SortActionPerformed

    private void CargarTablas(){
        this.modeloDetallesPacientes.getDataVector().removeAllElements();
        
        for(int i=0; i<this.listaGlobalDetalles.size(); i++)
        {
            String[] registroDoctores = {
                Integer.toString(this.listaGlobalDetalles.get(i).IDPaciente),
                this.listaGlobalDetalles.get(i).nombrePaciente, 
                this.listaGlobalDetalles.get(i).padecimiento,
                this.listaGlobalDetalles.get(i).estado,
                formatoFecha.format(this.listaGlobalDetalles.get(i).fechaIngreso),
                this.listaGlobalDetalles.get(i).nombreDoctor
            };
            modeloDetallesPacientes.addRow(registroDoctores);
        }
    }
    
    private void LlenarLista() throws ParseException{
        int cantidadDoctores = doctores.obtenerListaDoctores().size();
        
        for(int i = 0; i < cantidadDoctores; i++){
            int cantidadPacientes = doctores.obtenerListaDoctores().get(i).listaPacientes.size();
            
            for(int j = 0; j<cantidadPacientes; j++){
                listaGlobalDetalles.add(
                        new ListaGlobalDetalles(
                            doctores.obtenerListaDoctores().get(i).listaPacientes.get(j).ID,
                            doctores.obtenerListaDoctores().get(i).listaPacientes.get(j).nombre,
                            doctores.obtenerListaDoctores().get(i).listaPacientes.get(j).padecimiento,
                            doctores.obtenerListaDoctores().get(i).listaPacientes.get(j).estado,
                            formatoFecha.format(doctores.obtenerListaDoctores().get(i).listaPacientes.get(j).fechaIngreso),
                            doctores.obtenerListaDoctores().get(i).nombre
                        )
                );
            }
        }         
    }          
     
    public void leerArchivoJSON(File archivo) {
        try {
            // Lee el archivo a un String
            String contenido = new String(Files.readAllBytes(Paths.get(archivo.getPath())), "UTF-8");

            // Crea un JSONObject a partir del contenido del archivo
            JSONObject obj = new JSONObject(contenido);
        
            // Obtiene el JSONArray "ListaDeUsuarios" del objeto JSON
            JSONArray doctoresJ = obj.getJSONArray("listaDoctores");
        
            for (int i = 0; i < doctoresJ.length(); i++) {
                JSONObject doctoresJSON = doctoresJ.getJSONObject(i);
                Doctor currentUser = new Doctor(Integer.parseInt(doctoresJSON.getString("ID")), doctoresJSON.getString("Nombre"), doctoresJSON.getString("Especialidad"));
                
                JSONArray pacientes = doctoresJSON.getJSONArray("Lista Pacientes");
                
                for (int j = 0; j < pacientes.length(); j++) {
                    JSONObject pacientesJSON = pacientes.getJSONObject(j);
                    ArrayList<Paciente> listapacientes = new ArrayList();
                    SimpleDateFormat formatoFecha = new SimpleDateFormat("dd/MM/yyyy");
                    
                    Paciente paciente = new Paciente(Integer.parseInt(pacientesJSON.getString("ID")), pacientesJSON.getString("Nombre"), pacientesJSON.getString("Padecimiento"), pacientesJSON.getString("Estado"), pacientesJSON.getString("Fecha"));
                    listapacientes.add(paciente);
                    
                    currentUser.listaPacientes.addAll(listapacientes);
                
                }
            
                this.doctores.obtenerListaDoctores().add(currentUser);
            }        
        }catch (Exception e) {
            e.printStackTrace();
        }
    }
       
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmDetalles.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmDetalles.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmDetalles.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmDetalles.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        GestorDoctores doctores = new GestorDoctores();
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new frmDetalles(doctores).setVisible(true);
                } catch (ParseException ex) {
                    Logger.getLogger(frmDetalles.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscarPaciente;
    private javax.swing.JButton btnExportarCSV;
    private javax.swing.JButton btnExportarHTML;
    private javax.swing.JButton btnExportarJSON;
    private javax.swing.JButton btnImportarJSON;
    private javax.swing.JButton btnOrdenarFecha;
    private javax.swing.JButton btnOrdenarID_BD;
    private javax.swing.JButton btnOrdenarID_Sort;
    private javax.swing.JButton btnOrdenarNombre;
    private javax.swing.JButton btnRecargarTablas;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jtListaGlobalDetalle;
    private javax.swing.JLabel lblTiempo;
    private javax.swing.JTextField txtBuscarPaciente;
    // End of variables declaration//GEN-END:variables
}
